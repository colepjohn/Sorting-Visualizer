{"version":3,"sources":["Sortvis/Sortalgo/Sortalgo.jsx","Sortvis/Sortvis.jsx","App.js","reportWebVitals.js","index.js"],"names":["QuickSortAnimations","array","animations","arr","slice","DoQuickSort","length","sindex","eindex","pindex","min","max","Math","floor","random","push","lindex","i","partition","MergeSortAnimations","DoMergeSort","mindex","sarr","j","Merge","Sortvis","props","state","this","resetArray","randomInt","setState","N","DoSelectionSort","SelectionSortAnimations","bars","document","getElementsByClassName","color","ione","itwo","bar1","style","bar2","setTimeout","backgroundColor","index","nheight","bar","height","count","swapped","DoBubbleSort","BubbleSortAnimations","key","DoInsertionSort","InsertionSortAnimations","className","id","onClick","SelectionSort","BubbleSort","InsertionSort","QuickSort","MergeSort","map","value","idx","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8453f15e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function SelectionSortAnimations( array ) {\r\n    const animations = [];\r\n    let arr = array.slice();\r\n    DoSelectionSort( arr, animations );\r\n    array = arr;\r\n    return [ array, animations ];\r\n}\r\n\r\nfunction DoSelectionSort( arr, animations ) {\r\n    const N = arr.length;\r\n    for ( let i = 0; i < N - 1; i++ ) {\r\n        let min = i;\r\n        for ( let j = i + 1; j < N; j++ ) {\r\n            animations.push( [ 'compare1', j, min ] );\r\n            animations.push( [ 'compare2', j, min ] );\r\n            if ( arr[j] < arr[min] ) {\r\n                min = j;\r\n            }\r\n        } \r\n        animations.push( [ 'swap', min, arr[i] ] );\r\n        animations.push( [ 'swap', i, arr[min] ] );\r\n        [ arr[min], arr[i] ] = [ arr[i], arr[min] ];\r\n    }\r\n}\r\n\r\nexport function BubbleSortAnimations( array ) {\r\n    const animations = [];\r\n    let arr = array.slice();\r\n    DoBubbleSort( arr, animations );\r\n    array = arr;\r\n    return [ array, animations ];\r\n}\r\n\r\nfunction DoBubbleSort( arr, animations ) {\r\n    const N = arr.length;\r\n    let count = 0;\r\n    let swapped = false;\r\n    while ( swapped === false ) {\r\n        swapped = true;\r\n        for ( let i = 0; i < N - 1 - count; i++ ) {\r\n            animations.push( [ 'compare1', i, i + 1 ] );\r\n            animations.push( [ 'compare2', i, i + 1 ] );\r\n            if ( arr[i] > arr[i+1] ) {\r\n                animations.push( [ 'swap', i, arr[i+1] ] );\r\n                animations.push( [ 'swap', i + 1, arr[i] ] );\r\n                [ arr[i], arr[i+1] ] = [ arr[i+1], arr[i] ];\r\n                swapped = false;\r\n            }\r\n        } ++count;\r\n    }\r\n}\r\n\r\nexport function InsertionSortAnimations( array ) {\r\n    const animations = [];\r\n    let arr = array.slice();\r\n    DoInsertionSort( arr, animations );\r\n    array = arr;\r\n    return [ array, animations ];\r\n}\r\n\r\nfunction DoInsertionSort( arr, animations ) {\r\n    for ( let i = 1; i < arr.length; i++ ) {\r\n        let key = arr[i];\r\n        let j = i - 1;\r\n        animations.push( [ 'compare1', j, i ] );\r\n        animations.push( [ 'compare2', j, i ] );\r\n        while ( j >= 0 && key < arr[j] ) {\r\n            animations.push( [ 'swap', j + 1, arr[j] ] );\r\n            arr[j+1] = arr[j];\r\n            j = j - 1;\r\n            if ( j >= 0 ) {\r\n                animations.push( [ 'compare1', j, i ] );\r\n                animations.push( [ 'compare2', j, i ] );\r\n            }\r\n        }\r\n        animations.push( [ 'swap', j+1, key ] );\r\n        arr[j+1] = key;\r\n    }\r\n}\r\n\r\nexport function QuickSortAnimations( array ) {\r\n    const animations = [];\r\n    let arr = array.slice();\r\n    DoQuickSort( arr, 0, arr.length - 1, animations );\r\n    array = arr;\r\n    return [ array, animations ];\r\n}\r\n\r\nfunction DoQuickSort( arr, sindex, eindex, animations ) {\r\n    let pindex;\r\n    if ( sindex < eindex ) {\r\n        pindex = partition( arr, sindex, eindex, animations );\r\n        DoQuickSort( arr, sindex, pindex - 1, animations );\r\n        DoQuickSort( arr, pindex + 1, eindex, animations );\r\n    }\r\n}\r\n\r\nfunction partition( arr, sindex, eindex, animations ) {\r\n    let pindex = randomInt( sindex, eindex );\r\n    \r\n    animations.push( [ \"compare1\", pindex, eindex ] );\r\n    animations.push( [ \"swap\", pindex, arr[eindex] ] );\r\n    animations.push( [ \"swap\", eindex, arr[pindex] ] );\r\n    animations.push( [ \"compare2\", pindex, eindex ] );\r\n    [ arr[pindex], arr[eindex] ] = [ arr[eindex], arr[pindex] ];\r\n\r\n    let lindex = sindex;\r\n\r\n    for( let i = sindex; i < eindex; ++i ) {\r\n        animations.push( [ \"compare1\", i, eindex ] );\r\n        animations.push( [ \"compare2\", i, eindex ] );\r\n        if( arr[i] <= arr[eindex] ) {\r\n            animations.push( [ \"compare1\", i, lindex ] );\r\n            animations.push( [ \"swap\", i, arr[lindex] ] );\r\n            animations.push( [ \"swap\", lindex, arr[i] ] );\r\n            animations.push( [ \"compare2\", i, lindex ] );\r\n            [ arr[i], arr[lindex] ] = [ arr[lindex], arr[i] ];\r\n            lindex++;\r\n        }\r\n    }\r\n    animations.push( [ \"compare1\", lindex, eindex ] );\r\n    animations.push( [ \"swap\", eindex, arr[lindex] ] );\r\n    animations.push( [ \"swap\", lindex, arr[eindex] ] );\r\n    animations.push( [ \"compare2\", lindex, eindex ] );\r\n    \r\n    [ arr[lindex], arr[eindex] ] = [ arr[eindex], arr[lindex] ];\r\n    return lindex;\r\n}\r\n\r\nexport function MergeSortAnimations( array ) {\r\n    const animations = [];\r\n    let arr = array.slice();\r\n    DoMergeSort( arr, 0, arr.length - 1, animations );\r\n    array = arr;\r\n    return [ array, animations ];\r\n}\r\n\r\nfunction DoMergeSort( arr, sindex, eindex, animations ) {\r\n    if ( sindex === eindex ) return;\r\n\r\n    const mindex = Math.floor( ( sindex + eindex ) / 2 );\r\n    \r\n    DoMergeSort( arr, sindex, mindex, animations );\r\n    DoMergeSort( arr, mindex + 1, eindex, animations );\r\n    Merge( arr, sindex, mindex, eindex, animations );\r\n}\r\n\r\nfunction Merge( arr, sindex, mindex, eindex, animations ) {\r\n    let sarr = []; let i = sindex; let j = mindex + 1;\r\n\r\n    while ( i <= mindex && j <= eindex ) {\r\n        animations.push( [ 'compare1', i, j ] );\r\n        animations.push( [ 'compare2', i, j ] );\r\n\r\n        if ( arr[i] <= arr[j] ) {\r\n            sarr.push( arr[i++] );\r\n        } else {\r\n            sarr.push( arr[j++] );\r\n        }\r\n    } while ( i <= mindex ) {\r\n        animations.push( [ 'compare1', i, i ] );\r\n        animations.push( [ 'compare2', i, i ] );\r\n        sarr.push( arr[i++] );\r\n    } while ( j <= eindex ) {\r\n        animations.push( [ 'compare1', j, j ] );\r\n        animations.push( [ 'compare2', j, j ] );\r\n        sarr.push( arr[j++] );\r\n    } for ( let i = sindex; i <= eindex; i++ ) {\r\n        animations.push( [ 'compare1', i, i - sindex ] );\r\n        animations.push( [ 'swap', i, sarr[i - sindex] ] );\r\n        animations.push( [ 'compare2', i, i - sindex ] );\r\n        arr[i] = sarr[ i - sindex];\r\n    }\r\n}\r\n\r\nfunction randomInt( min, max ) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\r\n\r\nimport './Sortvis.css';\r\nimport {BubbleSortAnimations, InsertionSortAnimations, MergeSortAnimations, QuickSortAnimations, SelectionSortAnimations} from './Sortalgo/Sortalgo';\r\n\r\nexport default class Sortvis extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let array = []\r\n        for ( let i = 0; i < 300; i++ ) {\r\n            array.push( this.randomInt( 5, 500 ) );\r\n        } this.setState({array});\r\n    }\r\n\r\n    randomInt( min, max ) {\r\n        return Math.floor( Math.random() * ( max - min + 1 ) + min );\r\n    }\r\n\r\n    // BEST: O(N^2) AVERAGE: 0(N^2) WORST: O(N^2)\r\n    SelectionSort() {\r\n        const [ arr, animations ] = SelectionSortAnimations( this.state.array );\r\n        for ( let i = 0; i < animations.length; i++ ) {\r\n            const bars = document.getElementsByClassName( 'bars' );\r\n            if ( animations[i][0] === 'compare1' || animations[i][0] === 'compare2' ) {\r\n                const color = ( animations[i][0] === 'compare1' ) ? 'white' : 'rgb( 223, 121, 25 )';\r\n                const [ tmp, ione, itwo ] = animations[i];\r\n                const bar1 = bars[ione].style;\r\n                const bar2 = bars[itwo].style;\r\n                \r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = color;\r\n                    bar2.backgroundColor = color;\r\n                }, i * 0.6 );\r\n            } else {\r\n                const [ tmp, index, nheight ] = animations[i];\r\n                const bar = bars[index].style;\r\n                setTimeout(() => {\r\n                    bar.height = `${nheight}px`;\r\n                }, i * 0.6 );\r\n            }\r\n        }\r\n    }\r\n\r\n    // BEST: O(N) AVERAGE: O(N^2) WORST: O(N^2)\r\n    BubbleSort() {\r\n        const [ arr, animations ] = BubbleSortAnimations( this.state.array );\r\n        for ( let i = 0; i < animations.length; i++ ) {\r\n            const bars = document.getElementsByClassName( 'bars' );\r\n            if ( animations[i][0] === 'compare1' || animations[i][0] === 'compare2' ) {\r\n                const color = ( animations[i][0] === 'compare1' ) ? 'white' : 'rgb( 223, 121, 25 )';\r\n                const [ tmp, ione, itwo ] = animations[i];\r\n                const bar1 = bars[ione].style;\r\n                const bar2 = bars[itwo].style;\r\n\r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = color;\r\n                    bar2.backgroundColor = color;\r\n                }, i * 0.6 );\r\n            } else {\r\n                const [ tmp, index, nheight ] = animations[i];\r\n                if ( index === -1 ) { continue; }\r\n                const bar = bars[index].style;\r\n                setTimeout(() => {\r\n                    bar.height = `${nheight}px`;\r\n                }, i * 0.6 );\r\n            }\r\n        }\r\n    }\r\n\r\n    // BEST: O(N) AVERAGE: O(N^2) WORST: O(N^2)\r\n    InsertionSort() {\r\n        const [ arr, animations ] = InsertionSortAnimations( this.state.array );\r\n        for ( let i = 0; i < animations.length; i++ ) {\r\n            const bars = document.getElementsByClassName( 'bars' );\r\n            if ( animations[i][0] === 'compare1' || animations[i][0] === 'compare2' ) {\r\n                const color = ( animations[i][0] === 'compare1' ) ? 'white' : 'rgb( 223, 121, 25 )';\r\n                const [ tmp, ione, itwo ] = animations[i];\r\n                const bar1 = bars[ione].style;\r\n                const bar2 = bars[itwo].style;\r\n\r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = color;\r\n                    bar2.backgroundColor = color;\r\n                }, i * 0.6 );\r\n            } else {\r\n                const [ tmp, index, nheight ] = animations[i];\r\n                const bar = bars[index].style;\r\n                setTimeout(() => {\r\n                    bar.height = `${nheight}px`;\r\n                }, i * 0.6 );\r\n            }\r\n        }\r\n    }\r\n\r\n    QuickSort() {\r\n        const [ arr, animations ] = QuickSortAnimations( this.state.array );\r\n        for ( let i = 0; i < animations.length; i++ ) {\r\n            const bars = document.getElementsByClassName( 'bars' );\r\n            if ( animations[i][0] === 'compare1' || animations[i][0] === 'compare2' ) {\r\n                const color = ( animations[i][0] === 'compare1' ) ? 'white' : 'rgb( 223, 121, 25 )';\r\n                const [ tmp, ione, itwo ] = animations[i];\r\n                const bar1 = bars[ione].style;\r\n                const bar2 = bars[itwo].style;\r\n\r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = color;\r\n                    bar2.backgroundColor = color;\r\n                }, i * 0.6 );\r\n            } else {\r\n                const [ tmp, index, nheight ] = animations[i];\r\n                if ( index == -1 ) {\r\n                    continue;\r\n                }\r\n                const bar = bars[index].style;\r\n                setTimeout(() => {\r\n                    bar.height = `${nheight}px`;\r\n                }, i * 0.6 );\r\n            }\r\n        }\r\n    }\r\n\r\n    MergeSort() {\r\n        const [ arr, animations ] = MergeSortAnimations( this.state.array );\r\n        for ( let i = 0; i < animations.length; i++ ) {\r\n            const bars = document.getElementsByClassName( 'bars' );\r\n            if ( animations[i][0] === 'compare1' || animations[i][0] === 'compare2' ) {\r\n                const color = ( animations[i][0] === 'compare1' ) ? 'white' : 'rgb( 223, 121, 25 )';\r\n                const [ tmp, ione, itwo ] = animations[i];\r\n                const bar1 = bars[ione].style;\r\n                const bar2 = bars[itwo].style;\r\n\r\n                setTimeout(() => {\r\n                    bar1.backgroundColor = color;\r\n                    bar2.backgroundColor = color;\r\n                }, i * 0.6 );\r\n            } else {\r\n                const [ tmp, index, nheight ] = animations[i];\r\n                const bar = bars[index].style;\r\n                setTimeout(() => {\r\n                    bar.height = `${nheight}px`;\r\n                }, i * 0.6 );\r\n            }\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const {array} = this.state;\r\n        \r\n        return (\r\n            <div className=\"array-container\">\r\n                <div className = 'nav-bar'>\r\n                    <button id=\"button\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                    <button id=\"button\" onClick={() => this.SelectionSort()}>Selection Sort</button>\r\n                    <button id=\"button\" onClick={() => this.BubbleSort()}>Bubble Sort</button>\r\n                    <button id=\"button\" onClick={() => this.InsertionSort()}>Insertion Sort</button>\r\n                    <button id=\"button\" onClick={() => this.QuickSort()}>Quick Sort</button>\r\n                    <button id=\"button\" onClick={() => this.MergeSort()}>Merge Sort</button>\r\n                </div>\r\n                {array.map((value, idx) => (\r\n                    <div \r\n                    className=\"bars\" \r\n                    key={idx}\r\n                    style={{height: `${value}px`}}>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Sortvis from './Sortvis/Sortvis';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sortvis></Sortvis>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}